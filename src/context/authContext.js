"use client";
import { createContext, useContext, useEffect } from "react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import axios from "axios";

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const queryClient = useQueryClient();

  // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (ME API)
  const { data: user, isLoading, refetch } = useQuery({
    queryKey: ["authUser"],
    queryFn: async () => {
      const { data } = await axios.get("/api/auth/me");
      return data;
    },
    retry: false, // –ù–µ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    staleTime: 1000 * 60 * 60 * 12, // –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 12 —á–∞—Å–æ–≤
  });
  const role = user?.role;
  // üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  const registerMutation = useMutation({
    mutationFn: async ({ email, password }) => {
      const { data } = await axios.post("/api/auth/register", { email, password });
      return data;
    },
    onSuccess: () => refetch(),
  });

  // üîπ –õ–æ–≥–∏–Ω
  const loginMutation = useMutation({
    mutationFn: async ({ email, password }) => {
      // console.log(email);
      
      const { data } = await axios.post("/api/auth/login", { email, password });
      // console.log(data);
      
      return data;
    },
    onSuccess: () => refetch(),
  });

  // üîπ –í—ã—Ö–æ–¥
  const logoutMutation = useMutation({
    mutationFn: async () => {
      await axios.post("/api/auth/logout");
    },
    onSuccess: () => {
      queryClient.removeQueries(["authUser"]); // –£–¥–∞–ª—è–µ–º –∫–µ—à
    },
  });

  return (
    <AuthContext.Provider
      value={{
        user,
        role,
        isLoading,
        login: loginMutation.mutate,
        register: registerMutation.mutate,
        logout: logoutMutation.mutate,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AuthContext
export function useAuth() {
  return useContext(AuthContext);
}
